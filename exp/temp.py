# -*- coding: utf-8 -*-
import numpy as np
import sys
sys.path.append('../')
import src as ts
from importlib import reload  # Python 3.4+ only.
reload(ts)
import matplotlib.pyplot as plt
beta = 1


composition = [['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e0'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e1'],
 ['a0', 'e2'],
 ['a0', 'e2'],
 ['a0', 'e2'],
 ['a0', 'e3'],
 ['a0', 'e3'],
 ['a0', 'e3'],
 ['a0', 'e4'],
 ['a0', 'e4'],
 ['a0', 'e4'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e0'],
 ['a1', 'e1'],
 ['a1', 'e1'],
 ['a1', 'e1'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a1', 'e2'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e0'],
 ['a2', 'e1'],
 ['a2', 'e1'],
 ['a2', 'e1'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a2', 'e2'],
 ['a3', 'e0'],
 ['a3', 'e0'],
 ['a3', 'e0'],
 ['a3', 'e0'],
 ['a3', 'e0'],
 ['a3', 'e0'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e1'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a3', 'e2'],
 ['a4', 'e0'],
 ['a4', 'e0'],
 ['a4', 'e0'],
 ['a4', 'e0'],
 ['a4', 'e0'],
 ['a4', 'e0'],
 ['a4', 'e0'],
 ['a4', 'e0'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e1'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e2'],
 ['a4', 'e3'],
 ['a4', 'e3'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e0'],
 ['a5', 'e1'],
 ['a5', 'e1'],
 ['a5', 'e1'],
 ['a5', 'e1'],
 ['a5', 'e1'],
 ['a5', 'e1'],
 ['a5', 'e1'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2'],
 ['a5', 'e2']]
   
pos = [[0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [0, 1],
 [0, 1],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [1, 0],
 [0, 1],
 [1, 0],
 [0, 1],
 [0, 1]]
batch_number = [1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30]

prior_dict = {'e0':ts.Rating(mu=20, sigma=0.001,beta=1,noise=0),
            'e1':ts.Rating(mu=25,sigma=25/6,beta=1,noise=0),'e2':ts.Rating(mu=29,sigma=25/6,beta=1,noise=0), 
            'e3':ts.Rating(mu=31,sigma=25/6,beta=1,noise=0),'e4':ts.Rating(mu=33,sigma=25/6,beta=1,noise=0)}



env_1 = ts.TrueSkill(draw_probability=0,beta=1,tau=1 )
history_1 = env_1.History(composition, pos, batch_number  ,prior_dict , epsilon=0.1)

history_1.through_time()

plt.close()
for i in history_1.learning_curves_online:
    plt.plot(history_1.learning_curves_online[i])
plt.savefig('temp.pdf')




def curvaDeAprendizaje(t,skill_0=15,alpha=0.2,c=0):
    return skill_0*(t**alpha)+c
batchs_size = curvaDeAprendizaje(np.arange(2,30+2))-curvaDeAprendizaje(np.arange(1,30+1))
batchs_size  = (list(np.cumsum(batchs_size)) *6)
env_1 = ts.TrueSkill(draw_probability=0,beta=25/6,tau=4 )
history_1 = env_1.History(composition, pos, batch_number  ,prior_dict , epsilon=0.1)
history_1.through_time(False)
history_1.convergence()
plt.close()
for i in history_1.learning_curves:
    plt.plot(history_1.learning_curves[i])
plt.plot(np.arange(1,30+1),curvaDeAprendizaje(np.arange(1,30+1)))
plt.savefig('tau.pdf')
